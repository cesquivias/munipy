#!/usr/bin/env python

import logging
import logging.handlers
import time

from itertools import chain

from led_sign.client import SignClient

from munipy.nextbus import (predictions_url, next_bus_dom, predictions,
                            prediction_messages)


try:
    LOG_FILENAME = '/var/log/munipy.log'
    log = logging.getLogger('munipy-logger')
    log.addHandler(logging.handlers.RotatingFileHandler(LOG_FILENAME,
                                                        maxBytes=1000000,
                                                        backupCount=5))
except:
    log = logging.getLogger('munipy-logger')
    log.addHandler(logging.StreamHandler())

log.setLevel(logging.DEBUG)


def main(stop_ids, delay):
    client = SignClient()
    while True:
        try:
            messages = chain(*[
                    prediction_messages(
                        predictions(
                            next_bus_dom(
                                predictions_url(
                                    stop_id))))
                               for stop_id in stop_ids])
        except Exception, e:
            log.exception('DOM failed: %s', str(e))
            messages = [('Fetching data', 'failed')]

        is_success = client.send_multiple_messages(messages)
        if not is_success:
            log.critical('LED error: call to perl failed')

        time.sleep(delay)

if __name__ == '__main__':
    import sys

    from argparse import ArgumentParser

    parser = ArgumentParser(description='Fetch MUNI wait times.')
    parser.add_argument('stop_ids', metavar='stop-id', type=int, nargs='+',
                        help='muni stop id')
    parser.add_argument('--update-interval', dest='update_interval',
                        metavar='secs', type=int, default=60,
                        help='Refresh delay (default: 60 seconds)')

    args = parser.parse_args()

    main(args.stop_ids, args.update_interval)
